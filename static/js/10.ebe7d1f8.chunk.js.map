{"version":3,"sources":["pages/SearchResultPage.js"],"names":["SearchResultPage","useState","search","setSearch","loading","setLoading","params","URLSearchParams","useLocation","winLocation","window","location","href","query","test","getParameterByName","get","useEffect","unmount","searchAnime","then","res","data","catch","err","_","id","className","results","length","map","result","to","mal_id","src","image_url","alt","title","synopsis"],"mappings":"8OAOe,SAASA,IACpB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAS,IAAIC,gBAAgBC,cAAcN,QAC3CO,EAAcC,OAAOC,SAASC,KAC9BC,EAAQ,SAASC,KAAKL,GAAeM,YAAmB,IAAKN,GAAeH,EAAOU,IAAI,KAkB7F,OAhBAC,qBAAU,WACN,IAAIC,GAAU,EAUd,OARAC,YAAYN,EAAO,KACdO,MAAK,SAACC,GACAH,IACHf,EAAUkB,EAAIC,MACdjB,GAAW,OAEdkB,OAAM,SAAAC,GAAG,OAAInB,GAAW,MAEtB,SAAAoB,GACHP,GAAU,KAEf,CAACL,IAGA,qBAAKa,GAAG,UAAUC,UAAU,iBAA5B,SACKvB,EACG,cAAC,IAAD,IAEAF,EAAO0B,SAAW1B,EAAO0B,QAAQC,OAAS3B,EAAO0B,QAAQE,KAAI,SAACC,GAAD,OACzD,sBAAyBJ,UAAU,qBAAnC,UACI,qBAAKA,UAAU,cAAf,SACI,cAAC,IAAD,CAAMA,UAAU,aAAaK,GAAI,eAAiBD,EAAOE,OAAzD,SACI,qBAAKC,IAAKH,EAAOI,UAAWC,IAAI,SAGxC,sBAAKT,UAAU,eAAf,UACI,6BAAI,cAAC,IAAD,CAAMA,UAAU,aAAaK,GAAI,eAAiBD,EAAOE,OAAzD,SAAkEF,EAAOM,UAC7E,mBAAGV,UAAU,gBAAb,SAA8BI,EAAOO,WACrC,cAAC,IAAD,CAAMX,UAAU,YAAYK,GAAI,eAAiBD,EAAOE,OAAxD,4BATEF,EAAOE,WAajB,qBAAKN,UAAU,oCAAf,SACI","file":"static/js/10.ebe7d1f8.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport Loader from '../components/Loader';\nimport { getParameterByName } from '../utils/utils';\nimport { searchAnime } from '../api';\n\nexport default function SearchResultPage() {\n    const [search, setSearch] = useState([])\n    const [loading, setLoading] = useState(true)\n    const params = new URLSearchParams(useLocation().search)\n    const winLocation = window.location.href\n    const query = /github/.test(winLocation) ? getParameterByName('q', winLocation) : params.get('q')\n\n    useEffect(() => {\n        let unmount = false\n\n        searchAnime(query, 6000)\n            .then((res) => {\n                if(unmount) return\n                setSearch(res.data)\n                setLoading(false)\n            })\n            .catch(err => setLoading(false))\n        \n        return _ => {\n            unmount = true\n        }\n    }, [query])\n\n    return (\n        <div id=\"content\" className=\"search-results\">\n            {loading ? (\n                <Loader/>\n            ) : (\n                search.results && search.results.length ? search.results.map((result) => (\n                    <div key={result.mal_id} className=\"search-result flex\">\n                        <div className=\"search-left\">\n                            <Link className=\"anime-link\" to={'/page/anime/' + result.mal_id}>\n                                <img src={result.image_url} alt=\"\" />\n                            </Link>\n                        </div>\n                        <div className=\"search-right\">\n                            <h3><Link className=\"anime-link\" to={'/page/anime/' + result.mal_id}>{result.title}</Link></h3>\n                            <p className=\"anime-excerpt\">{result.synopsis}</p>\n                            <Link className=\"anime-btn\" to={'/page/anime/' + result.mal_id}>Read More</Link>\n                        </div>\n                    </div>\n                )) : (\n                    <div className=\"no-result-content flex center-all\">\n                        <h3>Search again or try another?</h3>\n                    </div>\n                )\n            )}\n        </div>\n    )\n}\n"],"sourceRoot":""}