{"version":3,"sources":["components/Card.js","components/Pagination.js","components/Genre.js","pages/GenrePage.js"],"names":["Card","detail","type","useParams","history","useHistory","param","isAnime","isManga","isCharacters","redirectToPage","e","preventDefault","push","mal_id","className","href","onClick","src","image_url","alt","episodes","rank","title","genres","SeparateArrayToLink","separator","link","page","score","Pagination","data","useState","width","window","innerWidth","dimension","setDimension","useEffect","_","debouncedHandleResize","debounce","addEventListener","removeEventListener","pagination","config","limit","Object","entries","responsive","find","key","BREAKPOINTS","navigation","id","currentIndex","parseInt","paginationTotal","Math","ceil","total","moveTrigger","offset","to","baseLink","minActive","maxActive","range","map","num","paginationLink","Genre","genre","setGenre","isLoading","setLoading","unmount","getGenre","then","res","catch","err","console","log","goBack","mal_url","name","item_count","items","anime","mobile","Loader","GenrePage"],"mappings":"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","file":"static/js/4.3c112491.chunk.js","sourcesContent":["import React from 'react'\nimport { SeparateArrayToLink } from '../utils/utils'\nimport { useParams, useHistory } from \"react-router-dom\"\n\nexport default function Card({detail}) {\n    const { type } = useParams()\n    const history = useHistory()\n    const param = type ? type : 'anime'\n    const isAnime = param === 'anime'\n    const isManga = param === 'manga'\n    const isCharacters = param === 'characters'\n    const redirectToPage = (e) => {\n        e.preventDefault()\n        history.push('/page/'+param+'/' + detail.mal_id)\n    }\n\n    return (\n        <div className=\"anime anime-card\">\n            <div className=\"anime-image\">\n                <a href={'page/'+param+'/' + detail.mal_id} className=\"anime-card-link\" onClick={redirectToPage}>\n                    <img src={detail.image_url} alt=\"\"/>\n                    {isAnime ? <span className=\"anime-eps\">{detail.episodes ? `${detail.episodes} EPS` : '?? EPS'}</span> : ''}\n                    \n                </a>\n                {isCharacters ? (\n                    <span className=\"character-rank-tag\">#{detail.rank}</span>\n                ) : ''}\n\n                <div className={'card-title anime-title' + (isCharacters ? ' character-name' : '')}>\n                    <a className=\"anime-link\" href={'/page/'+param+'/' + detail.mal_id} onClick={redirectToPage}>{detail.title}</a>\n                </div>\n                {detail.genres ?(\n                    <div className=\"anime-genre\">{SeparateArrayToLink(detail.genres, {separator: '', link: '#/genre/anime/', page: '/1'})}</div>\n                ) : ''}\n            </div>\n            \n            {isAnime || isManga\n                ? (\n                <div className=\"rating\">\n                    <i className=\"fa fa-star-o\" aria-hidden=\"true\"></i>\n                    <div className=\"rating-score\">{detail.score ? detail.score : 'NA'}</div>\n                </div>\n                ) : ''\n            }\n\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport { Link } from \"react-router-dom\"\nimport { range, debounce } from '../utils/utils'\nimport { BREAKPOINTS } from '../utils/constants';\nimport { config } from '../config'\n\nexport default function Pagination({data}) {\n    const [dimension, setDimension] = useState({ \n        width: window.innerWidth\n    })\n\n    useEffect(_ => {\n        const debouncedHandleResize = debounce(_ =>\n            setDimension({\n                width: window.innerWidth\n            })\n        , 200)\n\n        window.addEventListener('resize', debouncedHandleResize)\n    \n        return _ => {\n          window.removeEventListener('resize', debouncedHandleResize)\n        }\n    }, [])\n\n    const { pagination } = config\n\n    let limit = Object.entries(data.responsive || {}).find(([key]) => dimension.width <= BREAKPOINTS[key])\n    limit = (limit ? limit[1] : null) || pagination.navigation.limit || 10\n\n    const { id, page } = useParams()\n    const currentIndex = parseInt(page)\n    const paginationTotal = Math.ceil(data.total / 100)\n    const moveTrigger = Math.ceil(limit / 2)\n    const offset = currentIndex + moveTrigger\n    const paginationLink = () => {\n\n        let minActive = currentIndex - (limit - 2)\n        let maxActive = (currentIndex) + moveTrigger\n\n        if(currentIndex < moveTrigger){\n            minActive = 1\n            maxActive = limit;\n        }\n\n        if(currentIndex >= 5){\n            minActive = (currentIndex + 1) - moveTrigger\n            maxActive = currentIndex + moveTrigger;\n        }\n\n        if(offset >= paginationTotal){\n            minActive = (paginationTotal + 1) - limit\n            maxActive = paginationTotal;\n        }\n\n        if(limit > paginationTotal){\n            minActive = 1\n            maxActive = paginationTotal\n        }\n\n        return range(minActive, maxActive).map((num) => \n            <Link key={num} to={(data.baseLink + id || '') + '/' + num} className={'anime-pagination-link' + (currentIndex === num ? ' current': '')}>{num}</Link>\n        )\n    }\n    \n    return (\n        <div className='anime-pagination'>\n\n            {paginationTotal ? (\n                <>\n                    {currentIndex !== 1 ? (\n                        <>\n                            <Link to={data.baseLink + id + '/1'} className=\"anime-pagination-link prev controls\">&lt;&lt;</Link>\n                            <Link className='anime-pagination-link prev controls' to={data.baseLink + id + '/' + (currentIndex - 1)}>&lt;</Link>\n                        </>\n                    ) : ''}\n\n                    {paginationLink()}\n\n                    {currentIndex < paginationTotal ? (\n                        <>\n                            <Link className='anime-pagination-link next controls' to={data.baseLink + id + '/' + (currentIndex + 1)}>&gt;</Link>\n                            <Link to={data.baseLink + id + '/' + paginationTotal} className=\"anime-pagination-link prev controls\">&gt;&gt;</Link>\n                        </>\n                    ) : ''}\n        \n                </>\n            ) : ''}\n            \n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport { useParams, useHistory } from 'react-router'\nimport Card from './Card'\nimport Pagination from './Pagination'\nimport Loader from './Loader'\nimport { getGenre } from '../api'\n\nexport default function Genre() {\n    const [genre, setGenre] = useState({})\n    const [isLoading, setLoading] = useState(true)\n    const { id, page }  = useParams()\n    const history = useHistory()\n\n    useEffect(() =>{\n        let unmount = false\n        setLoading(true)\n\n        getGenre(id, page).then((res) => {\n            if(unmount) return\n            setGenre(res.data)\n            setLoading(false)\n        }).catch((err) => {\n            console.log(err);\n            setLoading(false)\n            history.goBack()\n        })\n\n        return _ => {\n            unmount = true\n        }\n    }, [id, page, history])\n\n    return (\n        <>\n            <div className=\"head flex anime-pagination-head\">\n                <h2>{genre.mal_url ? 'Genre: ' + genre.mal_url.name : ''}</h2>\n\n                <div className=\"anime-card-pagination\">\n                    {genre.item_count ? (\n                        <Pagination data={{\n                            total: genre.item_count,\n                            items: genre.anime,\n                            baseLink: '/genre/anime/',\n                            responsive: {\n                                mobile: 3\n                            }\n                        }}/>\n                    ) : ''}\n                </div>\n            </div>\n            \n            <div className=\"anime-pagination-body\">\n                {isLoading ? (\n                    <Loader/>\n                ) : ''}\n                <div className=\"anime-cards\">\n                    {genre.anime ? genre.anime.map(genre => \n                        <Card key={genre.mal_id} detail={genre} />\n                    ) : ''}\n                </div>\n            </div>\n\n            <div className=\"anime-card-pagination\">\n                {genre.item_count ? (\n                    <Pagination data={{\n                        total: genre.item_count,\n                        items: genre.anime,\n                        baseLink: '/genre/anime/',\n                        responsive: {\n                            mobile: 3\n                        }\n                    }}/>\n                ) : ''}\n            </div>\n        </>\n        \n \n    )\n}\n","import React from 'react'\nimport Genre from '../components/Genre'\n\nexport default function GenrePage() {\n\n    return (\n        <div id=\"content\">       \n            <div className=\"box\">\n                <Genre/>\n            </div>\n        </div>\n    )\n}\n"],"sourceRoot":""}