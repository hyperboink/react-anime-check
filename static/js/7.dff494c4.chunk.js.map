{"version":3,"sources":["utils/date.js","pages/SinglePage.js"],"names":["day","DAYS_OF_THE_WEEK","Date","getDay","formatDate","date","toLocaleDateString","SinglePage","useParams","id","type","pageType","useState","anime","setAnime","loading","setLoading","useEffect","unmount","getAnimeByTypeAndId","then","res","data","catch","err","console","log","_","className","src","image_url","alt","title_english","status","aired","from","to","episodes","SeparateArrayToLink","genres","separator","link","page","producers","studios","licensors","length","ifEmpty","duration","rating","score","rank","title","name","synopsis","about","trailer_url","width","height","frameBorder","allow","allowFullScreen","related","Object","entries","map","key","subType"],"mappings":"8HAAA,gFAEaA,EAAM,kBAAMC,KAAiB,IAAIC,MAAOC,WAIxCC,EAAa,SAAAC,GAAI,OAAI,IAAIH,KAAKG,GAAMC,mBAAmB,W,kJCCrD,SAASC,IACpB,MAAqBC,cAAbC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,KACNC,EAAoB,eAATD,EAAwB,YAAcA,EACvD,EAA0BE,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAC,qBAAU,WACN,IAAIC,GAAU,EAWd,OAVAF,GAAW,GAEXG,YAAoBR,EAAUF,GACzBW,MAAK,SAACC,GACAH,IACHJ,EAASO,EAAIC,MACbN,GAAW,OAEdO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAEvB,SAAAG,GACHT,GAAU,KAEf,CAACR,EAAMC,EAAUF,IAGhB,qBAAKmB,UAAU,mBAAf,SACKb,EACG,cAAC,IAAD,IAEA,qCACI,sBAAKa,UAAU,mBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,qBAAKC,IAAKhB,EAAMiB,UAAWC,IAAI,OAGrB,cAAbpB,EACG,qBAAKiB,UAAU,wBAAf,SACI,+BACI,iDAAoBf,EAAMmB,iBAC1B,0CAAanB,EAAMoB,UACnB,yCAAYpB,EAAMqB,MAAQ9B,YAAWS,EAAMqB,MAAMC,MAAQ,KAAzD,MAAkEtB,EAAMqB,OAASrB,EAAMqB,MAAME,GAAKhC,YAAWS,EAAMqB,MAAME,IAAM,QAC/H,wCAAWvB,EAAMH,QACjB,4CAAeG,EAAMwB,UAAY,QACjC,yCAAYC,YAAoBzB,EAAM0B,OAAQ,CAACC,UAAW,MAAOC,KAAM,iBAAkBC,KAAM,UAC/F,6CAAgBJ,YAAoBzB,EAAM8B,UAAW,CAACH,UAAW,UACjE,2CAAcF,YAAoBzB,EAAM+B,QAAS,CAACJ,UAAW,UAC7D,6CAAgB3B,EAAMgC,WAAahC,EAAMgC,UAAUC,OAASR,YAAoBzB,EAAMgC,UAAW,CAACL,UAAW,OAAQ,QACrH,4CAAeO,YAAQlC,EAAMmC,SAAU,SACvC,0CAAanC,EAAMoC,UACnB,yCAAYF,YAAQlC,EAAMqC,MAAO,SACjC,wCAAWH,YAAQlC,EAAMsC,KAAM,cAGvC,MAGR,sBAAKvB,UAAU,sBAAf,UACI,oBAAIA,UAAU,+BAAd,SAA8Cf,EAAMuC,OAASvC,EAAMwC,OACnE,4BAAIxC,EAAMyC,UAAYzC,EAAM0C,QAE3B1C,EAAM2C,aAAyB,UAAT9C,EACnB,sBAAKkB,UAAU,UAAf,UACI,yCACA,wBAAQ6B,MAAM,OAAOC,OAAO,MAAM7B,IAAKhB,EAAM2C,YAAaJ,MAAM,uBAAuBO,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,OAE3N,GAEU,cAAblD,EACG,qCACI,oBAAIiB,UAAU,gBAAd,+BAEA,qBAAKA,UAAU,eAAf,SACKf,EAAMiD,QAAUC,OAAOC,QAAQnD,EAAMiD,SAASG,KAAI,mCAAEC,EAAF,KAAOJ,EAAP,YAE3C,sBAAelC,UAAU,mBAAzB,UACI,mCAASsC,EAAT,QACC5B,YAAoBwB,EAAS,CAC1BtB,UAAW,KACXC,KAAM,UACN0B,SAAS,MALPD,MASd,QAGZ","file":"static/js/7.dff494c4.chunk.js","sourcesContent":["import { DAYS_OF_THE_WEEK } from '../utils/constants'\n\nexport const day = () => DAYS_OF_THE_WEEK[new Date().getDay()]\n\nexport const isValidDay = day => DAYS_OF_THE_WEEK.includes(day)\n\nexport const formatDate = date => new Date(date).toLocaleDateString(\"en-US\")","import React, {useState, useEffect} from 'react'\nimport { useParams } from \"react-router-dom\"\nimport { formatDate } from '../utils/date';\nimport { SeparateArrayToLink, ifEmpty } from '../utils/utils';\nimport { getAnimeByTypeAndId } from '../api';\nimport Loader from '../components/Loader';\n\nexport default function SinglePage() {\n    const { id, type } = useParams();\n    const pageType = type === 'characters' ? 'character' : type;\n    const [anime, setAnime] = useState([])\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() =>{\n        let unmount = false\n        setLoading(true)\n\n        getAnimeByTypeAndId(pageType, id)\n            .then((res) => {\n                if(unmount) return\n                setAnime(res.data)\n                setLoading(false)\n            })\n            .catch(err => console.log(err))\n\n        return _ => {\n            unmount = true\n        }\n    }, [type, pageType, id])\n\n    return (\n        <div className=\"single-page flex\">\n            {loading ? (\n                <Loader/>\n            ) : (\n                <>\n                    <div className=\"single-page-side\">\n                        <div className=\"featured-img\">\n                            <img src={anime.image_url} alt=\"\"/>\n                        </div>\n\n                        {pageType !== 'character' ? (\n                            <div className=\"single-page-side-info\">\n                                <ul>\n                                    <li>English Title: {anime.title_english}</li>\n                                    <li>Status: {anime.status}</li>\n                                    <li>Aired: {anime.aired ? formatDate(anime.aired.from) : '??'} - {anime.aired && anime.aired.to ? formatDate(anime.aired.to) : '??'}</li>\n                                    <li>Type: {anime.type}</li>\n                                    <li>Episodes: {anime.episodes || '??'}</li>\n                                    <li>Genre: {SeparateArrayToLink(anime.genres, {separator: ' / ', link: '#/genre/anime/', page: '/1'})}</li>\n                                    <li>Producers: {SeparateArrayToLink(anime.producers, {separator: ', '})}</li>\n                                    <li>Studios: {SeparateArrayToLink(anime.studios, {separator: ', '})}</li>\n                                    <li>Licensors: {anime.licensors && anime.licensors.length ? SeparateArrayToLink(anime.licensors, {separator: ', '}): 'NA'}</li>\n                                    <li>Duration: {ifEmpty(anime.duration, 'NA')}</li>\n                                    <li>Rating: {anime.rating}</li>\n                                    <li>Score: {ifEmpty(anime.score, 'NA')}</li>\n                                    <li>Rank: {ifEmpty(anime.rank, 'NA')}</li>\n                                </ul>\n                            </div>\n                        ) : ''}\n                    </div>\n\n                    <div className=\"single-page-content\">\n                        <h1 className=\"single-page-title page-title\">{anime.title || anime.name}</h1>\n                        <p>{anime.synopsis || anime.about}</p>\n\n                        {anime.trailer_url && (type === 'anime')? (\n                            <div className=\"trailer\">\n                                <h3>Trailer</h3>\n                                <iframe width=\"100%\" height=\"400\" src={anime.trailer_url} title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                            </div>\n                        ) : ''}\n\n                        {pageType !== 'character' ? (\n                            <>\n                                <h3 className=\"related-title\">Other Information</h3>\n\n                                <div className=\"related-info\">\n                                    {anime.related ? Object.entries(anime.related).map(([key, related]) => \n                                        (\n                                            <div key={key} className=\"related-info-con\">\n                                                <strong>{key}: </strong>\n                                                {SeparateArrayToLink(related, {\n                                                    separator: ', ',\n                                                    link: '#/page/',\n                                                    subType: true\n                                                })}\n                                            </div>\n                                        )\n                                    ) : ''}\n                            </div>\n                            </>\n                        ) : ''}\n                    </div>\n                </>\n            )}\n        </div>\n    )\n}\n"],"sourceRoot":""}